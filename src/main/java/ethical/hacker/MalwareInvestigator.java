package ethical.hacker;

import java.nio.file.Path;
import java.util.List;
import java.util.Objects;
import java.util.stream.Stream;
import javafx.application.Application;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.TextField;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import org.apache.commons.lang3.StringUtils;
import schema.sngpc.JsonViewer;
import simplebuilder.SimpleButtonBuilder;
import simplebuilder.StageHelper;
import utils.FunctionEx;
import utils.ResourceFXUtils;
import utils.RunnableEx;

public class MalwareInvestigator extends Application {

    private JsonViewer jsonViewer = new JsonViewer();

    @Override
    public void start(Stage primaryStage) throws Exception {
        TextField textField = new TextField();
        textField.setAccessibleText("Type the ip(s)");
        Parent root = new VBox(textField, SimpleButtonBuilder.newButton("Check IP", e -> {
            String ip = textField.getText().trim();
            displayViewer();
            String[] split = ip.split("[^0-9\\.]+");
            for (String string : split) {
                if (StringUtils.isNotBlank(string)) {
                    RunnableEx.run(() -> jsonViewer.addFile(VirusTotalApi.getIpInformation(string)));
                }
            }
        }), StageHelper.chooseFile("Verify Virus Total", "Choose Exe", f -> {
            displayViewer();
            jsonViewer.addFile(VirusTotalApi.getFilesInformation(HashVerifier.getSha256Hash(f.toPath())));
            jsonViewer.setLast();

        }, "Executable", "*.exe", "*.dll", "*.msi"),
                StageHelper.selectDirectory("Verify Directory", "Choose Dir", f -> {
                    List<Path> pathByExtension = ResourceFXUtils.getPathByExtension(f, ".exe", ".dll", ".msi");
                    displayViewer();
                    pathByExtension.stream().map(FunctionEx.makeFunction(HashVerifier::getSha256Hash))
                            .filter(Objects::nonNull)
                            .flatMap(FunctionEx.makeFunction(p -> Stream.of(VirusTotalApi.getFilesInformation(p))))
                            .filter(Objects::nonNull).forEach(jsonViewer::addFile);
                    jsonViewer.setLast();
                }));

        primaryStage.setScene(new Scene(root));
        primaryStage.show();
    }

    private void displayViewer() {
        jsonViewer.start(new Stage());
    }

    public static void main(String[] args) {
        launch(args);
    }
}