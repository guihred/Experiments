package ethical.hacker;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.ListView;
import javafx.scene.control.SplitPane;
import javafx.scene.control.TextField;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import schema.sngpc.JsonViewer;
import simplebuilder.SimpleButtonBuilder;
import simplebuilder.SimpleListViewBuilder;
import simplebuilder.StageHelper;
import utils.FunctionEx;
import utils.HasLogging;
import utils.ResourceFXUtils;
import utils.RunnableEx;

public class MalwareInvestigator extends Application {

    private static final Logger LOG = HasLogging.log();

    private JsonViewer jsonViewer = new JsonViewer();

    private Stage otherStage = new Stage();

    private TextField textField;

    @Override
    public void start(Stage primaryStage) throws Exception {
        textField = new TextField();
        textField.setPromptText("Type the ip(s)");
        ObservableList<Path> files = ResourceFXUtils
                .getFirstFileMatch(ResourceFXUtils.getOutFile(), e -> e.toFile().getName().matches("[0-9a-f]+.json"))
                .stream().sorted(Comparator.comparing(e -> e.getName(e.getNameCount() - 1).toString()))
                .collect(Collectors.toCollection(FXCollections::observableArrayList));
        ObservableList<Path> ips = ResourceFXUtils
                .getFirstFileMatch(ResourceFXUtils.getOutFile(), e -> e.toFile().getName().matches("[\\d\\.]+.json"))
                .stream().sorted(Comparator.comparing(e -> e.getName(e.getNameCount() - 1).toString()))
                .collect(Collectors.toCollection(FXCollections::observableArrayList));
        Parent root = new SplitPane(
                new VBox(textField, listViewForPath(ips), SimpleButtonBuilder.newButton("Check IP", e -> checkIp())),
                new VBox(
                        StageHelper.chooseFile("Verify Virus Total", "Choose Exe", this::chooseExeFile, "Executable",
                                "*.exe", "*.dll", "*.msi"),
                        listViewForPath(files),
                        StageHelper.selectDirectory("Verify Directory", "Choose Dir", this::chooseDirectory)));
        Scene value = new Scene(root);
        primaryStage.setScene(value);
        primaryStage.show();
    }

    private void checkIp() {
        displayViewer();
        String[] ips = textField.getText().trim().split("[^0-9\\.]+");
        for (String ip : ips) {
            if (StringUtils.isNotBlank(ip)) {
                LOG.info("CHECKING IP {}", ip);
                RunnableEx.run(() -> jsonViewer.addFile(VirusTotalApi.getIpInformation(ip)));
            }
        }
    }

    private void chooseDirectory(File f) {
        List<Path> pathByExtension = ResourceFXUtils.getPathByExtension(f, ".exe", ".dll", ".msi");
        LOG.info("DIR EXECUTABLES  {}", pathByExtension);
        displayViewer();
        pathByExtension.stream()
                .flatMap(FunctionEx.makeFunction(p -> Stream.of(VirusTotalApi.getFilesInformation(p))))
                .filter(Objects::nonNull).forEach(jsonViewer::addFile);
        jsonViewer.setLast();
    }

    private void chooseExeFile(File f) throws IOException {
        displayViewer();
        LOG.info("EXECUTABLE  {}", f);
        jsonViewer.addFile(VirusTotalApi.getFilesInformation(f.toPath()));
        jsonViewer.setLast();
    }

    private void displayViewer() {
        jsonViewer.start(otherStage);
    }

    private ListView<Path> listViewForPath(ObservableList<Path> firstFileMatch) {
        return new SimpleListViewBuilder<Path>().cellFactory((Path e) -> e.getName(e.getNameCount() - 1).toString())
                .onSelect((old, e) -> {
                    LOG.info("CHOOSING {}", e);
                    displayViewer();
                    jsonViewer.addFile(firstFileMatch.stream().map(Path::toFile).toArray(File[]::new));
                    jsonViewer.setFile(e.toFile());
                }).items(firstFileMatch).prefWidth(Bindings.selectDouble(textField.sceneProperty(), "width").divide(2))
                .build();
    }

    public static void main(String[] args) {
        launch(args);

    }
}