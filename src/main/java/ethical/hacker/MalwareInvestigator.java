package ethical.hacker;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Stream;
import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.ListView;
import javafx.scene.control.SplitPane;
import javafx.scene.control.TextField;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import schema.sngpc.JsonViewer;
import simplebuilder.SimpleButtonBuilder;
import simplebuilder.SimpleDialogBuilder;
import simplebuilder.SimpleListViewBuilder;
import simplebuilder.StageHelper;
import utils.*;

public class MalwareInvestigator extends Application {

    private static final Logger LOG = HasLogging.log();

    private static final String MALICIOUS_REGEX = "[ \\t]*\"malicious\": *[1-9]\\d*,* *";

    private JsonViewer jsonViewer = new JsonViewer();
    private Stage otherStage = new Stage();

    private TextField ipField;

    private TextField urlsField;

    @Override
    public void start(Stage primaryStage) throws Exception {
        ipField = new TextField();
        urlsField = new TextField();
        ipField.setPromptText("Type the ip(s)");
        ObservableList<Path> files = addMaliciousFiles(ResourceFXUtils.getPathByExtension(ResourceFXUtils.getOutFile(),
                ".exe.json", ".msi.json", ".dll.json"));
        ObservableList<Path> ips = addMaliciousFiles(ResourceFXUtils.getFirstFileMatch(ResourceFXUtils.getOutFile(),
                e -> e.toFile().getName().matches("[\\d\\.]+.json")));
        ObservableList<Path> urls = addMaliciousFiles(ResourceFXUtils.getFirstFileMatch(ResourceFXUtils.getOutFile(),
                e -> e.toFile().getName().matches("http_.+.json")));

        Parent root = new SplitPane(
                new VBox(ipField, listViewForPath(ips), SimpleButtonBuilder.newButton("Check IP", e -> checkIp())),
                new VBox(urlsField, listViewForPath(urls),
                        SimpleButtonBuilder.newButton("Check Urls", e -> checkUrls())),
                new VBox(
                        StageHelper.chooseFile("Verify Virus Total", "Choose Exe", this::chooseExeFile, "Executable",
                                "*.exe", "*.dll", "*.msi"),
                        listViewForPath(files),
                        StageHelper.selectDirectory("Verify Directory", "Choose Dir", this::chooseDirectory)));
        Scene value = new Scene(root);
        primaryStage.setScene(value);
        primaryStage.show();
        SimpleDialogBuilder.bindWindow(otherStage, ipField);
    }

    private void checkIp() {
        displayViewer();
        String[] ips = ipField.getText().trim().split("[^0-9\\.]+");
        jsonViewer.clear();
        RunnableEx.runNewThread(() -> {
            Stream.of(ips).filter(StringUtils::isNotBlank).sorted().distinct()
                    .flatMap(ip -> SupplierEx.get(() -> Stream.of(VirusTotalApi.getIpInformation(ip)), Stream.empty()))
                    .forEach(jsonViewer::addFile);
            if (jsonViewer.getFiles().isEmpty()) {
                Stream.of(ips).filter(StringUtils::isNotBlank).sorted().distinct().flatMap(ip -> SupplierEx
                        .get(() -> Stream.of(VirusTotalApi.getIpInformation(ip, false)), Stream.empty()))
                        .forEach(jsonViewer::addFile);
            }
        });
    }

    private void checkUrls() {
        displayViewer();
        String[] urls = urlsField.getText().trim().split("[ ,]+");
        jsonViewer.clear();
        RunnableEx.runNewThread(() -> Stream.of(urls).filter(StringUtils::isNotBlank).sorted().distinct()
                .flatMap(url -> SupplierEx.get(() -> Stream.of(VirusTotalApi.getUrlInformation(url)), Stream.empty()))
                .forEach(jsonViewer::addFile));
    }

    private void chooseDirectory(File f) {
        jsonViewer.clear();
        ResourceFXUtils.getPathByExtensionAsync(f, path -> jsonViewer.addFile(VirusTotalApi.getFilesInformation(path)),
                ".exe", ".dll", ".msi");
        displayViewer();
    }

    private void chooseExeFile(File f) throws IOException {
        displayViewer();
        LOG.info("EXECUTABLE  {}", f);
        jsonViewer.addFile(VirusTotalApi.getFilesInformation(f.toPath()));
        jsonViewer.setLast();
    }

    private void displayViewer() {
        jsonViewer.start(otherStage);
    }

    private ListView<Path> listViewForPath(ObservableList<Path> firstFileMatch) {
        return new SimpleListViewBuilder<Path>().cellFactory((Path e) -> e.getName(e.getNameCount() - 1).toString())
                .onSelect((old, e) -> {
                    LOG.info("CHOOSING {}", e);
                    displayViewer();
                    jsonViewer.addFile(firstFileMatch.stream().map(Path::toFile).toArray(File[]::new));
                    jsonViewer.setFile(e.toFile());
                }).items(firstFileMatch).prefWidth(Bindings.selectDouble(ipField.sceneProperty(), "width").divide(3))
                .build();
    }

    public static void main(String[] args) {
        launch(args);

    }

    private static ObservableList<Path> addMaliciousFiles(List<Path> firstFileMatch) {
        ObservableList<Path> ips = FXCollections.observableArrayList();
        RunnableEx.runNewThread(() -> firstFileMatch.stream()
                .filter(PredicateEx.makeTest(e -> Files.lines(e).anyMatch(l -> l.matches(MALICIOUS_REGEX))))
                .sorted(Comparator.comparing(e -> e.getName(e.getNameCount() - 1).toString())).forEach(ips::add));
        return ips;
    }
}