package ethical.hacker;

import fxml.utils.JsonViewer;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javafx.application.Application;
import javafx.beans.binding.Bindings;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.ListView;
import javafx.scene.control.SplitPane;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import simplebuilder.FileChooserBuilder;
import simplebuilder.SimpleDialogBuilder;
import simplebuilder.SimpleListViewBuilder;
import utils.CommonsFX;
import utils.FileTreeWalker;
import utils.ResourceFXUtils;
import utils.ex.HasLogging;
import utils.ex.PredicateEx;
import utils.ex.RunnableEx;
import utils.ex.SupplierEx;

public class MalwareInvestigator extends Application {
    private static final Logger LOG = HasLogging.log();
    private static final String MALICIOUS_REGEX = "[ \\t]*\"malicious\": *[1-9]\\d*,* *";
    @FXML
    private TextField ipField;
    @FXML
    private ListView<Path> ipList;
    @FXML
    private ListView<Path> urlList;
    @FXML
    private ListView<Path> fileList;
    @FXML
    private TextField urlsField;
    @FXML
    private SplitPane splitPane0;

    private JsonViewer jsonViewer;

    private Stage otherStage;

    public void chooseDirectory(File f) {
        jsonViewer.clear();
        FileTreeWalker.getPathByExtensionAsync(f, path -> jsonViewer.addFile(VirusTotalApi.getFilesInformation(path)),
                ".exe", ".dll", ".msi");
        displayViewer();
    }

    public void chooseExeFile(File f) throws IOException {
        displayViewer();
        LOG.info("EXECUTABLE  {}", f);
        jsonViewer.addFile(VirusTotalApi.getFilesInformation(f.toPath()));
        jsonViewer.setLast();
    }

    public void initialize() {
        jsonViewer = new JsonViewer();
        otherStage = new Stage();
        ObservableList<Path> files = addMaliciousFiles(
                FileTreeWalker.getPathByExtension(ResourceFXUtils.getOutFile(), ".exe.json", ".msi.json", ".dll.json"));
        adjustList(fileList, files);
        ObservableList<Path> ips = addMaliciousFiles(FileTreeWalker.getFirstFileMatch(ResourceFXUtils.getOutFile(),
                e -> e.toFile().getName().matches("[\\d\\.]+.json")));
        adjustList(ipList, ips);
        ObservableList<Path> urls = addMaliciousFiles(FileTreeWalker.getFirstFileMatch(ResourceFXUtils.getOutFile(),
                e -> e.toFile().getName().matches("http.+.json")));
        adjustList(urlList, urls);
        splitPane0.setDividerPositions(0.33, 0.66);
    }

    public void onActionCheckIP() {
        displayViewer();
        String[] ips = ipField.getText().trim().split("[^0-9\\.]+");
        jsonViewer.clear();
        RunnableEx.runNewThread(() -> {
            Map<File, List<String>> collect = Stream.of(ips).filter(StringUtils::isNotBlank).sorted().distinct()
                    .flatMap(ip -> SupplierEx.get(() -> Stream.of(VirusTotalApi.getIpInformation(ip)), Stream.empty()))
                    .collect(Collectors.toMap(Entry<File, List<String>>::getKey, Entry<File, List<String>>::getValue));
            List<File> collect2 = getFileList(collect);
            collect2.forEach(jsonViewer::addFile);
            LOG.info("CHECKED {}", Arrays.asList(ips));
        });
    }

    public void onActionCheckUrls() {
        displayViewer();
        String[] urls = urlsField.getText().trim().split("[ ,]+");
        jsonViewer.clear();
        RunnableEx.runNewThread(() -> Stream.of(urls).filter(StringUtils::isNotBlank).sorted().distinct()
                .flatMap(url -> SupplierEx.get(() -> Stream.of(VirusTotalApi.getUrlInformation(url)), Stream.empty()))
                .forEach(jsonViewer::addFile));
    }

    public void onActionVerifyDirectory(ActionEvent e) {
        new FileChooserBuilder().title("Choose Dir").onSelect(this::chooseDirectory)
                .initialDir(ResourceFXUtils.getUserFolder("Music")).openDirectoryAction(e);
    }

    public void onActionVerifyVirusTotal(ActionEvent e) {
        new FileChooserBuilder().title("Choose Exe").extensions("Executable", "*.exe", "*.dll", "*.msi")
                .onSelect(this::chooseExeFile).openFileAction(e);
    }

    @Override
    public void start(Stage primaryStage) {
        CommonsFX.loadFXML("Malware Investigator", "MalwareInvestigator.fxml", this, primaryStage, 600, 300);
        SimpleDialogBuilder.bindWindow(otherStage, ipField);
    }

    private void adjustList(ListView<Path> list, ObservableList<Path> urls) {
        list.setItems(urls);
        list.setCellFactory(
                SimpleListViewBuilder.newCellFactory((Path e) -> e.getName(e.getNameCount() - 1).toString()));
        SimpleListViewBuilder.of(list).onKeyReleased(ev -> SimpleListViewBuilder.copyContent(list, ev))
                .onDoubleClick(chosen -> {
                    LOG.info("CHOOSING {}", chosen);
                    displayViewer();
                    jsonViewer.clear();
                    jsonViewer.addFile(list.getItems().stream().map(Path::toFile).toArray(File[]::new));
                    jsonViewer.setFile(chosen.toFile());
                });
        list.prefWidthProperty().bind(Bindings.selectDouble(ipField.sceneProperty(), "width").divide(3));
    }

    private void displayViewer() {
        jsonViewer.start(otherStage);
    }

    public static void main(String[] args) {
        launch(args);
    }

    private static ObservableList<Path> addMaliciousFiles(List<Path> firstFileMatch) {
        ObservableList<Path> ips = FXCollections.observableArrayList();
        RunnableEx.runNewThread(() -> firstFileMatch.stream()
                .filter(PredicateEx.makeTest(e -> Files.lines(e).anyMatch(l -> l.matches(MALICIOUS_REGEX))))
                .sorted(Comparator.comparing(e -> e.getName(e.getNameCount() - 1).toString())).forEach(ips::add));
        return ips;
    }

    private static List<File> getFileList(Map<File, List<String>> collect) {
        if (collect.values().stream().anyMatch(e -> !e.isEmpty())) {
            return collect.entrySet().stream().filter(e -> !e.getValue().isEmpty())
                    .map(Entry<File, List<String>>::getKey).collect(Collectors.toList());
        }
        return collect.keySet().stream().collect(Collectors.toList());
    }
}
